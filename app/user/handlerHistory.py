from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InputMediaPhoto, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import asyncio

from aiogram.utils.keyboard import InlineKeyboardBuilder

router = Router()

from app.database.requests import requestsHistoryMessage, requestsHistoryConsultation, requestsDoctor, requestsSpecialty
from app.keyboards import kbInline
from app.businessLogic import logicConsultation
from config import type_consultation


@router.message(F.text == '–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π')
async def message_history_of_consultations(message: Message):
    patient_id = message.from_user.id
    consultations = await requestsHistoryConsultation.get_all_consultations_by_patient_id(patient_id)

    if not consultations:
        await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.')
        return

    specialties_set = set(c.specialty for c in consultations)

    builder = InlineKeyboardBuilder()
    for spec in specialties_set:
        builder.button(text=spec, callback_data=f"history_spec_{spec}")
    builder.adjust(1)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith('history_spec_'))
async def callback_history_specialty(callback: CallbackQuery):
    specialty = callback.data.split('_', 2)[2]
    patient_id = callback.from_user.id

    consultations = await requestsHistoryConsultation.get_all_consultations_by_patient_id(patient_id)
    doctors_set = set(c.doctor_id for c in consultations if c.specialty == specialty)

    builder = InlineKeyboardBuilder()
    for doctor_id in doctors_set:
        doctor = await requestsDoctor.get_doctor_by_user_id(doctor_id)
        builder.button(text=doctor.full_name, callback_data=f"history_doc_{doctor_id}_{specialty}")
    builder.button(text="–ù–∞–∑–∞–¥", callback_data="history_back_to_start")
    builder.adjust(1)

    await callback.message.edit_text(f"–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏: {specialty}", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith('history_doc_'))
async def callback_history_doctor(callback: CallbackQuery):
    parts = callback.data.split('_', 3)
    doctor_id = int(parts[2])
    specialty = parts[3]
    patient_id = callback.from_user.id

    consultations = await requestsHistoryConsultation.get_all_consultations_by_patient_and_doctor_id(
        patient_id, doctor_id
    )

    header_text = (
        "üîÑ- –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. –î–æ–∫—Ç–æ—Ä —É–≤–∏–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –¥–∏–∞–ª–æ–≥, –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é, "
        "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –µ—ë –Ω–æ–≤—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –≤–∞—à–µ–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏"
    )
    await callback.message.edit_text(header_text)

    builder = InlineKeyboardBuilder()
    for c in consultations:
        text = f"{c.name} {'üîÑ' if c.chat_type in ['mainFirst', 'mainRepeated'] else ''}"
        builder.button(text=text, callback_data=f"history_consult_{c.id}")
    builder.button(text="–ù–∞–∑–∞–¥", callback_data=f"history_spec_{specialty}")
    builder.adjust(1)

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:", reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith('history_consult_'))
async def callback_history_consultation(callback: CallbackQuery):
    consult_id = int(callback.data.split('_')[2])
    consultation = await requestsHistoryConsultation.get_consultation(consult_id)
    messages = await requestsHistoryConsultation.get_messages_by_consultation_id(consult_id)

    for msg in messages:
        match msg.media_type:
            case "text":
                await callback.message.answer(msg.text)
            case "photo":
                await callback.message.answer_photo(photo=msg.media_id, caption=msg.text)
            case "document":
                await callback.message.answer_document(document=msg.media_id, caption=msg.text)
            case "mediaGroup":
                pass  # –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å media_group

    builder = InlineKeyboardBuilder()
    if consultation.chat_type in ["mainFirst", "mainRepeated"]:
        builder.button(text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —ç—Ç—É –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data=f"history_continue_{consult_id}")
    builder.button(text="–ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data=f"history_new_{consult_id}")
    builder.button(text="–ù–∞–∑–∞–¥", callback_data=f"history_doc_{consultation.doctor_id}_{consultation.specialty}")
    builder.adjust(1)

    await callback.message.answer("–î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π:", reply_markup=builder.as_markup())


# @router.message(F.text == '–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π')
# async def message_historyOfConsultations(message: Message):
#     patient_id = message.from_user.id
#     specialties = await requestsSpecialty.get_specialties_by_patient(patient_id)
#
#     if not specialties:
#         await message.answer('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π.')
#         return
#
#     # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è–º–∏
#     keyboard = await kbInline.getKeyboardSpecialtiesHistory(specialties)
#     await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –≤–∞—Å —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å:', reply_markup=keyboard)


# @router.message(F.text == '–ò—Å—Ç–æ—Ä–∏—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π')
# async def message_historyOfConsultations(message: Message):

# await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏', reply_markup=kbInline.typesHistoryConsultation)


@router.callback_query(F.data == 'ongoingConsultations')
async def callback_ongoingConsultations(callback: CallbackQuery):
    await logicConsultation.continueConsultation(callback)


# @router.callback_query(F.data == 'completedConsultations')
# async def callback_completedConsultations(callback: CallbackQuery):
#     patient_id = callback.from_user.id
#     consultations = await requestsHistoryConsultation.get_all_consultations_by_patient_id(patient_id)
#     if len(consultations) > 0:
#         await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é',
#                                          reply_markup=await kbInline.getKeyboardCompletedConsultations(consultations,
#                                                                                                        0))
#     else:
#         await callback.answer('–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π –Ω–µ—Ç')
@router.callback_query(F.data.startswith('history_specialty_'))
async def callback_history_specialty(callback: CallbackQuery):
    specialty_id = int(callback.data.split('_')[2])
    patient_id = callback.from_user.id
    doctors = await requestsDoctor.get_doctors_by_specialty_id_and_patient(specialty_id, patient_id)
    if doctors:
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–∞—á–∞',
                                         reply_markup=await kbInline.getKeyboardDoctorsHistory(doctors, specialty_id))
    else:
        await callback.answer('–í—ã –ø–æ–∫–∞ –Ω–µ –æ–±—Ä–∞—â–∞–ª–∏—Å—å –∫ –≤—Ä–∞—á—É —ç—Ç–æ–π —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏')


# --- –•–µ–Ω–¥–ª–µ—Ä —É—Ä–æ–≤–Ω—è 2: –≤—ã–±–æ—Ä –≤—Ä–∞—á–∞ ---
@router.callback_query(F.data.startswith('history_doctor_'))
async def callback_history_doctor(callback: CallbackQuery):
    doctor_id = int(callback.data.split('_')[2])
    specialty_id = int(callback.data.split('_')[3])
    patient_id = callback.from_user.id
    consultations = await requestsHistoryConsultation.get_consultations_by_patient_and_doctor(patient_id, doctor_id)
    if consultations:
        # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Å —É—á—ë—Ç–æ–º üîÑ
        consultation_titles = []
        for c in consultations:
            title = c.title
            if c.chat_type in ['mainFirst', 'mainRepeated']:  # —Ç–∏–ø—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
                title = f'üîÑ {title}'
            consultation_titles.append(
                {'id': c.id, 'title': title, 'isRepeated': c.chat_type in ['mainFirst', 'mainRepeated']})
        text = ("üîÑ- –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å. "
                "–î–æ–∫—Ç–æ—Ä —É–≤–∏–¥–∏—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã–π –≤–∞–º–∏ –¥–∏–∞–ª–æ–≥, –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∞ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç—å –µ—ë –Ω–æ–≤—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏ –∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –≤–∞—à–µ–º —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–∏\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é:")
        await callback.message.edit_text(text,
                                         reply_markup=await kbInline.getKeyboardConsultationsHistory(
                                             consultation_titles, doctor_id, specialty_id))
    else:
        await callback.answer('–ù–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π —Å —ç—Ç–∏–º –≤—Ä–∞—á–æ–º')


# --- –•–µ–Ω–¥–ª–µ—Ä —É—Ä–æ–≤–Ω—è 3: –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ ---
@router.callback_query(F.data.startswith('history_consultation_'))
async def callback_history_consultation(callback: CallbackQuery):
    parts = callback.data.split('_')
    consultation_id = int(parts[2])
    doctor_id = int(parts[3])
    specialty_id = int(parts[4])
    consultation = await requestsHistoryConsultation.get_consultation(consultation_id)
    messages = await requestsHistoryMessage.get_all_messages_by_consultation_id(consultation_id)

    await callback.message.edit_text(f'<b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è: {consultation.title}</b>\n\n–ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:',
                                     parse_mode='html')
    for message in messages:
        match message.media_type:
            case 'text':
                await callback.message.answer(message.text, parse_mode='html')
            case 'photo':
                await callback.message.answer_photo(photo=message.media_id, caption=message.text, parse_mode='html')
            case 'document':
                await callback.message.answer_document(document=message.media_id, caption=message.text,
                                                       parse_mode='html')
            case 'mediaGroup':
                mediaGroup = [InputMediaPhoto(media=photo, parse_mode='html') for photo in message.media_id.split(', ')]
                mediaGroup[0].caption = message.text
                await callback.message.answer_media_group(media=mediaGroup)
        await asyncio.sleep(0.5)

    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π: –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å / –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å / –Ω–∞–∑–∞–¥
    is_continuable = consultation.chat_type in ['mainFirst', 'mainRepeated']
    await callback.message.answer(
        '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=await kbInline.getKeyboardConsultationActions(consultation_id, doctor_id, is_continuable,
                                                                   specialty_id)
    )


@router.callback_query(F.data.startswith('completedConsultation_'))
async def callback_completedConsultation(callback: CallbackQuery):
    id_consultation = int(callback.data.split('_')[1])
    isRepeated = callback.data.split('_')[2] != '0'
    consultation = await requestsHistoryConsultation.get_consultation(id_consultation)
    specialty = await requestsSpecialty.get_specialty_by_name(consultation.specialty)
    doctors = await requestsDoctor.get_doctors_by_specialty(specialty.name)
    doctor_id = consultation.doctor_id
    index = 0
    for i in range(len(doctors)):
        if doctors[i].user_id == doctor_id:
            index = i
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                     reply_markup=await kbInline.getKeyboardActionsCompletedConsultation(
                                         consultation.doctor_id, consultation.chat_type, id_consultation, isRepeated,
                                         index, specialty.id))


@router.callback_query(F.data.startswith('isStartAgain_'))
async def callback_isStartAgain(callback: CallbackQuery):
    id_consultation = int(callback.data.split('_')[1])
    isRepeated = callback.data.split('_')[2] != '0'
    consultation = await requestsHistoryConsultation.get_consultation(id_consultation)
    specialty = await requestsSpecialty.get_specialty_by_name(consultation.specialty)

    doctors = await requestsDoctor.get_doctors_by_specialty(specialty.name)
    doctor_id = consultation.doctor_id
    index = 0
    for i in range(len(doctors)):
        if doctors[i].user_id == doctor_id:
            index = i

    doctor = await requestsDoctor.get_doctor_by_user_id(doctor_id)
    await callback.message.edit_text(f'''{doctor.full_name}

–¢–∏–ø: {type_consultation[consultation.chat_type]}
–°—Ç–æ–∏–º–æ—Å—Ç—å: {int(await logicConsultation.getPrice(consultation.doctor_id, consultation.chat_type) * 1.2)} —Ä—É–±.

–í—ã —É–≤–µ—Ä–µ–Ω—ã?''',
                                     reply_markup=await kbInline.getKeyboardStartAgainOrReturn(
                                         consultation.doctor_id,
                                         consultation.chat_type,
                                         isRepeated,
                                         specialty.id,
                                         id_consultation,
                                         index))


@router.callback_query(F.data.startswith('startAgainCompletedConsultation_'))
async def callback_startAgainCompletedConsultation(callback: CallbackQuery, state: FSMContext):
    chat_type = callback.data.split('_')[2]
    id_consultation = int(callback.data.split('_')[4])
    await logicConsultation.historyToMessageToSend(id_consultation)
    match chat_type:
        case 'justAsk':
            await logicConsultation.consultationJustAsk(callback, state)
        case 'decoding':
            await logicConsultation.consultationDecoding(callback, state)
        case 'mainRepeated' | 'mainFirst':
            await logicConsultation.startRepeatedConsultation(callback, state)
        case 'secondOpinion':
            await logicConsultation.consultationSecondOpinion(callback, state)


@router.callback_query(F.data.startswith('readCompletedConsultation_'))
async def callback_readCompletedConsultation(callback: CallbackQuery):
    id_consultation = int(callback.data.split('_')[1])
    consultation = await requestsHistoryConsultation.get_consultation(id_consultation)
    doctor_id = int(callback.data.split('_')[2])
    chat_type = callback.data.split('_')[3]
    isRepeated = callback.data.split('_')[4] != '0'

    specialty = await requestsSpecialty.get_specialty_by_name(consultation.specialty)
    doctors = await requestsDoctor.get_doctors_by_specialty(specialty.name)
    index = 0
    for i in range(len(doctors)):
        if doctors[i].user_id == doctor_id:
            index = i

    messages = await requestsHistoryMessage.get_all_messages_by_consultation_id(id_consultation)
    await callback.message.edit_text('<b>–ù–∞—á–∞–ª–æ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>', parse_mode='html')
    for message in messages:
        match message.media_type:
            case 'text':
                await callback.message.answer(message.text, parse_mode='html')
            case 'photo':
                await callback.message.answer_photo(photo=message.media_id, caption=message.text,
                                                    parse_mode='html')
            case 'document':
                await callback.message.answer_document(document=message.media_id, caption=message.text,
                                                       parse_mode='html')
            case 'mediaGroup':
                mediaGroup = [InputMediaPhoto(media=photo, parse_mode='html') for photo in message.media_id.split(', ')]
                mediaGroup[0].caption = message.text
                await callback.message.answer_media_group(media=mediaGroup)
        await asyncio.sleep(0.5)
    specialty = await requestsSpecialty.get_specialty_by_name(consultation.specialty)
    await callback.message.answer('<b>–ö–æ–Ω–µ—Ü –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</b>', parse_mode='html',
                                  reply_markup=await kbInline.getKeyboardStartAgainOrReturn(doctor_id, chat_type,
                                                                                            isRepeated, specialty.id,
                                                                                            id_consultation, index))


@router.callback_query(F.data == 'returnToHistoryCompletedConsultations')
async def callback_returnToHistoryCompletedConsultations(callback: CallbackQuery):
    # await callback_completedConsultations(callback)
    pass
