import asyncio

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, CallbackQuery, InputMediaPhoto

from app.database.models import Doctor
from app.keyboards.kbInline import consent_keyboard, submitRequest1
from run import bot

router = Router()


class Request(StatesGroup):
    full_name = State()
    country = State()
    city = State()
    telegram = State()


class Connect(StatesGroup):
    help_patient = State()
    admin = State()
    answer_admin = State()
    represent = State()
    answer_represent = State()
    appeal = State()
    answer_appeal = State()
    answer_connect_admin = State()


photosToSend = []
lock = asyncio.Lock()

from app.keyboards import kbInline, kbReply
from app.database.requests import requestsDoctor
from config import admin_group_id


@router.message(F.text == '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ')
async def message_cooperation(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª', reply_markup=kbInline.cooperationCommand)


@router.callback_query(F.data == 'returnToCooperation')
async def callback_returnToCooperation(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π —Ä–∞–∑–¥–µ–ª', reply_markup=kbInline.cooperationCommand)


@router.callback_query(F.data == 'forDoctors')
async def callback_forDoctors(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text('''–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ

üíô –ú–µ–Ω—è–π—Ç–µ –∂–∏–∑–Ω–∏ –∫ –ª—É—á—à–µ–º—É
–í–∞—à–∞ –ø–æ–º–æ—â—å –Ω–∞–ø—Ä—è–º—É—é –≤–ª–∏—è–µ—Ç –Ω–∞ –∑–¥–æ—Ä–æ–≤—å–µ –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ –ª—é–¥–µ–π.

üí∏ –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ —É–¥–∞–ª–µ–Ω–Ω–æ
–ü–æ–ª—É—á–∞–π—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—è –æ–Ω–ª–∞–π–Ω –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.

ü§ôüèª –ü—Ä–æ–¥–≤–∏–≥–∞–π—Ç–µ —Å–≤–æ–∏ —É—Å–ª—É–≥–∏ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏–π
–†–∞—Å—à–∏—Ä—è–π—Ç–µ –∫–ª–∏–µ–Ω—Ç—Å–∫—É—é –±–∞–∑—É –∏ –ø–æ–≤—ã—à–∞–π—Ç–µ —Å–≤–æ—é —Ä–µ–ø—É—Ç–∞—Ü–∏—é.

üìà –£–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ –ø–æ—Ç–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
–ü—Ä–∏–≤–ª–µ–∫–∞–π—Ç–µ –ª—é–¥–µ–π –Ω–∞ –æ—á–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –¥–æ–≤–µ—Ä–∏–µ –∫ —Å–æ–æ–±—â–µ—Å—Ç–≤—É.

üì± –†–∞—Å—Ç–∏—Ç–µ –∞—É–¥–∏—Ç–æ—Ä–∏—é –≤ —Å–æ—Ü—Å–µ—Ç—è—Ö
–†–µ–∫–ª–∞–º–∏—Ä—É–π—Ç–µ —Å–≤–æ–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª–∏ —Å—Ä–µ–¥–∏ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏.

ü§ù –†–∞—Å—à–∏—Ä—è–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏
–ó–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –∫–æ–ª–ª–µ–≥–∞–º–∏, –æ–±–º–µ–Ω–∏–≤–∞–π—Ç–µ—Å—å –æ–ø—ã—Ç–æ–º –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –ø–∞—Ä—Ç–Ω—ë—Ä–æ–≤.

üß† –ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –Ω–∞–≤—ã–∫–æ–≤
–ü–æ–ª—É—á–∞–π—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É, —Å–æ–≤–µ—Ç—ã –∏ –¥–æ—Å—Ç—É–ø –∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –æ—Ç —ç–∫—Å–ø–µ—Ä—Ç–æ–≤.

üå± –†–∞—Å–∫—Ä–æ–π—Ç–µ —Å–≤–æ–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª
–†–µ–∞–ª–∏–∑—É–π—Ç–µ –∞–º–±–∏—Ü–∏–∏ –≤ –º–µ–¥–∏—Ü–∏–Ω–µ –∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–Ω–∞—á–∏–º—ã–µ –ø—Ä–æ–µ–∫—Ç—ã.
''', reply_markup=submitRequest1)
    await state.clear()


@router.callback_query(F.data == "submitRequest1")
async def callback_submitRequest1(callback: CallbackQuery, state: FSMContext):
    await state.update_data(license_accepted=False, privacy_accepted=False, personal_accepted=False)

    message_text = (
        'üìã <b>–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–≥–ª–∞—Å–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:</b>\n\n'

        '‚Ä¢ <a href="https://docs.google.com/document/d/1_9szCZrkTcqGgQtlt72eS5-qpspIjVu-Q9EUmXhxiu4/edit?tab=t.0">'
        '–õ–∏—Ü–µ–Ω–∑–∏–æ–Ω–Ω–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</a>\n'

        '‚Ä¢ <a href="https://docs.google.com/document/d/1_9szCZrkTcqGgQtlt72eS5-qpspIjVu-Q9EUmXhxiu4/edit?tab=t.0">'
        '–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>\n'

        '‚Ä¢ <a href="https://docs.google.com/document/d/1_9szCZrkTcqGgQtlt72eS5-qpspIjVu-Q9EUmXhxiu4/edit?tab=t.0">'
        '–°–æ–≥–ª–∞—Å–∏–µ –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö</a>\n\n'

        'üìñ <i>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫–∏ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–ª—è —á—Ç–µ–Ω–∏—è</i>\n'
        '‚úÖ <i>–ü–æ—Å–ª–µ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –ø–æ—Å—Ç–∞–≤—å—Ç–µ –≥–∞–ª–æ—á–∫–∏ —Å–æ–≥–ª–∞—Å–∏—è</i>'
    )

    await callback.message.edit_text(
        message_text,
        reply_markup=consent_keyboard({}),
        parse_mode='HTML',
        disable_web_page_preview=True
    )


@router.callback_query(F.data.startswith("toggle_"))
async def callback_toggleConsent(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    data.setdefault("license_accepted", False)
    data.setdefault("privacy_accepted", False)
    data.setdefault("personal_accepted", False)

    if callback.data == "toggle_license":
        data["license_accepted"] = not data["license_accepted"]
    elif callback.data == "toggle_privacy":
        data["privacy_accepted"] = not data["privacy_accepted"]
    elif callback.data == "toggle_personal":
        data["personal_accepted"] = not data["personal_accepted"]

    await state.update_data(data)

    if data["license_accepted"] and data["privacy_accepted"] and data["personal_accepted"]:
        await state.set_state(Request.full_name)
        await callback.message.edit_text('‚úÖ –í—Å–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è –ø—Ä–∏–Ω—è—Ç—ã!\n\n–£–∫–∞–∂–∏—Ç–µ –§–ò–û:')
    else:
        await callback.message.edit_reply_markup(reply_markup=consent_keyboard(data))

    await callback.answer()


@router.message(Request.full_name)
async def message_requestFullName(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(Request.country)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É')


@router.message(Request.country)
async def message_requestCountry(message: Message, state: FSMContext):
    await state.update_data(country=message.text)
    await state.set_state(Request.city)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥')


@router.message(Request.city)
async def message_requestCity(message: Message, state: FSMContext):
    await state.update_data(city=message.text)
    await state.set_state(Request.telegram)
    await message.answer('–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º –∞–∫–∫–∞—É–Ω—Ç –¥–ª—è —Å–≤—è–∑–∏ (–ø—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏–ª–∏ —é–∑–µ—Ä–Ω–µ–π–º)')


@router.message(Request.telegram)
async def message_requestTelegram(message: Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    doctor = Doctor(
        user_id=user_id,
        full_name=data['full_name'],
        country=data['country'],
        city=data['city'],
        social_networks_telegram=message.text

    )
    await requestsDoctor.add_doctor(doctor)
    await state.clear()
    await message.answer(
        '–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –≤—Ä–∞—á–∞ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ. –ü–µ—Ä–µ–π—Ç–∏ –≤ –ø–∞–Ω–µ–ª—å –≤—Ä–∞—á–∞ –º–æ–∂–Ω–æ, –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /doctor',
        reply_markup=kbReply.kbDoctorMain)
    await bot.send_message(chat_id=admin_group_id, text=f'''–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π –¥–æ–∫—Ç–æ—Ä!

ID: {user_id}
–§–ò–û: {data['full_name']}
–ê–∫–∫–∞—É–Ω—Ç: {message.text}
–°—Ç—Ä–∞–Ω–∞: {data['country']}
–ì–æ—Ä–æ–¥: {data['city']}
''')


@router.callback_query(F.data == 'learnMoreAboutProject')
async def callback_learnMoreAboutProject(callback: CallbackQuery):
    await callback.message.edit_text('—É–∑–Ω–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ –æ –ø—Ä–æ–µ–∫—Ç–µ', reply_markup=kbInline.learnMoreAboutProjectKeyboard)


@router.callback_query(F.data == 'advantagesOfParticipation')
async def callback_advantagesOfParticipation(callback: CallbackQuery):
    await callback.message.edit_text('–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–∏—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ',
                                     reply_markup=kbInline.advantagesOfParticipationKeyboard)


@router.callback_query(F.data == 'helpPatient')
async def callback_helpPatient(callback: CallbackQuery):
    await callback.message.edit_text('''–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤—Ä–∞—á–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Ä–µ—à–µ–Ω–∏—è, –æ—Ç –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–≤–∏—Å—è—Ç –∂–∏–∑–Ω–∏ –ª—é–¥–µ–π: —Ä–∞–±–æ—Ç–∞—é—Ç —Å–≤–µ—Ä—Ö—É—Ä–æ—á–Ω–æ, —Å—Ç–∞–ª–∫–∏–≤–∞—é—Ç—Å—è —Å –±–æ–ª—å—é, –Ω–µ—Ö–≤–∞—Ç–∫–æ–π –≤—Ä–µ–º–µ–Ω–∏ –∏ —Ä–µ—Å—É—Ä—Å–æ–≤. 
–û–Ω–∏ –∂–µ—Ä—Ç–≤—É—é—Ç –ª–∏—á–Ω—ã–º –≤—Ä–µ–º–µ–Ω–µ–º, –≤—ã–¥–µ—Ä–∂–∏–≤–∞—è –≥—Ä—É–∑ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –∫—Ä–∏—Ç–∏–∫—É, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç –±–æ—Ä–æ—Ç—å—Å—è –∑–∞ –∂–∏–∑–Ω—å –∏ –∑–¥–æ—Ä–æ–≤—å–µ –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞.

–í—Ä–∞—á–∏ ‚Äî –∂–∏–≤–æ–π –ø—Ä–∏–º–µ—Ä —Ç–æ–≥–æ, —á—Ç–æ –≥–µ—Ä–æ–∏–∑–º ‚Äî —ç—Ç–æ –Ω–µ –ø–æ–¥–≤–∏–≥–∏ –≤ –∫–∏–Ω–æ, –∞ –æ—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –≤—ã–±–æ—Ä –Ω–µ –ø—Ä–æ–π—Ç–∏ –º–∏–º–æ —á—É–∂–æ–π –±–æ–ª–∏,–∏–º–µ–Ω–Ω–æ –ø–æ—ç—Ç–æ–º—É –º–Ω–æ–≥–∏–µ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –¥–µ–ª–∞—é—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º–∏-  üïä

 –í—ã —Ç–æ–∂–µ –º–æ–∂–µ—Ç–µ –±—ã—Ç—å –≥–µ—Ä–æ–µ–º!


üì¢ –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –Ω–∞—Å –≤ —Å–æ—Ü. —Å–µ—Ç—è—Ö
–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ ‚Äî —ç—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø—Ä–∏–≤–ª–µ—á—å —Ç–µ—Ö, –∫–æ–º—É –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å 

üåü –°—Ç–∞–Ω—å—Ç–µ –∞–º–±–∞—Å—Å–∞–¥–æ—Ä–æ–º –¥–æ–±—Ä–∞
–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–π—Ç–µ –∏—Å—Ç–æ—Ä–∏–∏, —Å–æ–≤–µ—Ç—ã –∏–ª–∏ —É—Å–ø–µ—Ö–∏ –ø—Ä–æ–µ–∫—Ç–∞ ‚Äî –í–∞—à–∞ –∞—É–¥–∏—Ç–æ—Ä–∏—è —É–∑–Ω–∞–µ—Ç –æ –≤–∞–∂–Ω–æ–π –∏–Ω–∏—Ü–∏–∞—Ç–∏–≤–µ –∏ –í–∞—à–∏—Ö –¥–æ–±—Ä—ã—Ö –¥–µ–ª–∞—Ö.

ü§ùüèª –ü—Ä–µ–¥–ª–æ–∂–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ
–í–∞—à–∏ –Ω–∞–≤—ã–∫–∏, –∏–¥–µ–∏ –∏–ª–∏ –ø–∞—Ä—Ç–Ω—ë—Ä—Å–∫–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã –º–æ–≥—É—Ç —Å—Ç–∞—Ç—å —Ü–µ–Ω–Ω—ã–º –≤–∫–ª–∞–¥–æ–º –≤ —Ä–∞–∑–≤–∏—Ç–∏–µ –ø—Ä–æ–µ–∫—Ç–∞!

üíå –ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç–µ –≤—Ä–∞—á–∞ –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç
–í—ã –º–æ–∂–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –≤–∫–ª–∞–¥ –≤ —Å–∏–ª—ã –∏ —Ä–µ—Å—É—Ä—Å—ã –≤—Ä–∞—á–µ–π, –æ—Ç–ø—Ä–∞–≤–∏–≤ –ª—é–±—É—é —Å—É–º–º—É –¥–æ–∫—Ç–æ—Ä—É –≤ –∫–æ–Ω—Ü–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.

–î–∞–∂–µ –±–µ–∑ –¥–µ–Ω–µ–≥ –º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —á—å—é-—Ç–æ –∂–∏–∑–Ω—å –∫ –ª—É—á—à–µ–º—É!
–°–ø–∞—Å–∏–±–æ, —á—Ç–æ —Ä–∞–∑–¥–µ–ª—è–µ—Ç–µ –Ω–∞—à–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏!
''', reply_markup=kbInline.supportProjectCooperation)


async def connectAdmin(message, state, text):
    patient_id = message.from_user.id
    data = await state.get_data()
    try:
        await bot.edit_message_text(chat_id=patient_id, message_id=data['id'], text=data['text'])
    except:
        pass

    if message.photo:
        photosToSend.append({'message': message, 'patient_id': patient_id})
        await asyncio.sleep(1)
        async with lock:
            photos = []
            photosToDelete = []
            for photo in photosToSend:
                if photo['patient_id'] == patient_id:
                    photos.append(photo['message'])
                    photosToDelete.append(photo)
            if photos:
                mediaGroup = [InputMediaPhoto(media=photo.photo[-1].file_id, parse_mode='html') for photo in photos]
                if photos[0].html_text != '':
                    mediaGroup[0].caption = photos[0].html_text

                if len(mediaGroup) > 1:
                    await bot.send_media_group(chat_id=admin_group_id, media=mediaGroup)
                    await bot.send_message(chat_id=admin_group_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ',
                                           reply_markup=await kbInline.getKeyboardAnswerConnectAdmin(patient_id))
                else:
                    await bot.send_photo(chat_id=admin_group_id, photo=message.photo[-1].file_id,
                                         caption=f'''{text} <code>{patient_id}</code>

{message.html_text}''', parse_mode='html', reply_markup=await kbInline.getKeyboardAnswerConnectAdmin(patient_id))

                for photo in photosToDelete:
                    photosToSend.remove(photo)

                await state.clear()
                await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.',
                                     reply_markup=await kbReply.kbPatientMain(patient_id))
    else:
        await bot.send_message(chat_id=admin_group_id, text=f'''{text} <code>{patient_id}</code>

{message.html_text}''', parse_mode='html', reply_markup=await kbInline.getKeyboardAnswerConnectAdmin(patient_id))
        await state.clear()
        await message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–∫–æ—Ä–æ —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.',
                             reply_markup=await kbReply.kbPatientMain(patient_id))


@router.callback_query(F.data.startswith('answerConnectAdmin_'))
async def callback_answerConnectAdmin(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Connect.answer_admin)
    await state.update_data(patient_id=int(callback.data.split('_')[1]))
    try:
        await callback.message.edit_text(callback.message.html_text, parse_mode='html')
    except:
        await callback.message.edit_caption(inline_message_id=str(callback.message.message_id),
                                            caption=callback.message.html_text, parse_mode='html')
    await callback.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç')


@router.message(Connect.answer_admin)
async def message_answerConnectAdmin(message: Message, state: FSMContext):
    data = await state.get_data()
    patient_id = data['patient_id']
    await bot.send_message(chat_id=patient_id, text=f'''<code>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è</code>

{message.html_text}''', parse_mode='html', reply_markup=kbInline.answerConnectAdmin)
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')


@router.callback_query(F.data == 'connectAdmin')
async def callback_connectAdmin(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Connect.admin)
    message = await callback.message.edit_text(
        '–£–∫–∞–∂–∏—Ç–µ –≤–∞—à —Ä–æ–¥ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ –∏ –æ—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã –¥–ª—è —Å–≤—è–∑–∏, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.',
        reply_markup=kbInline.returnToCooperation)
    await state.update_data(id=message.message_id, text=message.text)


@router.message(Connect.admin)
async def message_connectAdmin(message: Message, state: FSMContext):
    await connectAdmin(message, state, '–°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')


@router.callback_query(F.data == 'representProject')
async def callback_connectRepresent(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Connect.represent)
    message = await callback.message.edit_text(
        '–£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏, –æ–ø–∏—à–∏—Ç–µ –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å—Å—ã–ª–∫—É –∏ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ.',
        reply_markup=kbInline.returnToCooperation)
    await state.update_data(id=message.message_id, text=message.text)


@router.message(Connect.represent)
async def message_connectRepresent(message: Message, state: FSMContext):
    await connectAdmin(message, state, '–ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é –ø—Ä–æ–µ–∫—Ç/–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é')


@router.callback_query(F.data == 'connectAdminAppeal')
async def callback_connectAdminAppeal(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Connect.appeal)
    message = await callback.message.edit_text('–û–ø–∏—à–∏—Ç–µ —Å—É—Ç—å –í–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.',
                                               reply_markup=kbInline.returnToFAQ)
    await state.update_data(id=message.message_id, text=message.text)


@router.message(Connect.appeal)
async def message_connectAdminAppeal(message: Message, state: FSMContext):
    await connectAdmin(message, state, '–û–±—Ä–∞—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')


@router.callback_query(F.data == 'answerConnectAdmin')
async def callback_answerConnectAdmin(callback: CallbackQuery, state: FSMContext):
    await state.set_state(Connect.answer_connect_admin)
    message = await callback.message.edit_text('–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –æ—Ç–≤–µ—Ç', reply_markup=kbInline.returnToMenu)
    await state.update_data(id=message.message_id, text=message.text)


@router.message(Connect.answer_connect_admin)
async def message_answerConnectAdmin(message: Message, state: FSMContext):
    await connectAdmin(message, state, '–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
